<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: $ -->
<!-- EN-Revision: 351935 Maintainer: Serge #2137 Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="control-structures.match" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>match</title>
 <?phpdoc print-version-for="match"?>
 <para>
  L'élement de langage <literal>match</literal> dirige l'évaluation d'après une comparaison strict entre l'expression soumise et l'objet de la condition.
  Similaire à une instruction <literal>switch</literal>, <literal>match</literal> possède une expression à comparer avec plusieurs alternatives.
  Contrairement à <literal>switch</literal>, match évaluera la valeur un peut comme les structures conditionnelles ternaires.
  Contrairement à <literal>switch</literal>, la condition est une comparaison strict(Ndlr: à l'identique) (<code>===</code>) plutôt qu'une comparaison faiblement typé(Ndlr: d'égalité faible)(<code>==</code>).
  Les structures <literal>match</literal> sont disponibles à partir de PHP 8.0.0.
 </para>

 <example>
  <title>Structure d'une expression <literal>match</literal></title>
  <programlisting role="php">
<![CDATA[
<?php
$return_value = match (subject_expression) {
    single_conditional_expression => return_expression,
    conditional_expression1, or_conditional_expression2 => return_expression,
};
?>
]]>
  </programlisting>

  <note>
   <simpara>
    La valeur de retour d'une structure <literal>match</literal> est optionnel.
   </simpara>
  </note>
  <note>
   <simpara>
    Une structure <literal>match</literal> <emphasis>doit</emphasis> être terminé par le caractere de fin d'instruction <literal>;</literal>.
   </simpara>
  </note>
 </example>

 <para>
  Une structure <literal>match</literal> est similaire à une instruction
  <literal>switch</literal> mais possède quelques différences clé :
  
  <itemizedlist>
   <listitem>
    <simpara>
     Un embranchement de <literal>match</literal> compare les valueurs strictement (<code>===</code>) contrairement à l'instruction <literal>switch</literal> qui le fait faiblement.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Une expression <literal>match</literal> retourne une valeur.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Un embranchement de <literal>match</literal> ne passe pas aux
     cas ultérieurs comme le fait une instruction <literal>switch</literal>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Une structure <literal>match</literal> doit être exhaustive.
    </simpara>
   </listitem>
  </itemizedlist>
 </para>

 <para>
  Comme les instructions <literal>switch</literal>, les structures <literal>match</literal>
  évalue l'embranchement associées par condition.
  Au début, seule l'expression fourni est évalué.
  Les expressions soumis à condition sont seulement évalué si toute les conditions précédente on échoué.
  Seul l'expression de retour correspondant a l'embranchement sera évalué.
  Par exemple :
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$result = match ($x) {
    foo() => ...,
    $this->bar() => ..., // bar() isn't called if foo() === $x
    $this->baz => beep(), // beep() isn't called unless $x === $this->baz
    // etc.
};
?>
]]>
   </programlisting>
  </informalexample>
 </para>

 <para>
  Les embranchements d'une structure <literal>match</literal> peuvent contenir
  plusieurs expressions séparées par une virgule. C'est un OU logique,
  et c'est un raccourci pour plusieurs embranchement similaire. 
 </para>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$result = match ($x) {
    // Cet embranchement:
    $a, $b, $c => 5,
    // Equivalent à ces trois embranchement:
    $a => 5,
    $b => 5,
    $c => 5,
};
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Un cas particulier est la clause <literal>default</literal>.
  Cette clause correspond à tout ce qui ne correspondait pas auparavant. 
  Par exemple:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$expressionResult = match ($condition) {
    1, 2 => foo(),
    3, 4 => bar(),
    default => baz(),
};
?>
]]>
   </programlisting>
  </informalexample>
  <note>
   <simpara>
    Plusieurs clause <literal>default</literal> soulèveront une erreur
    <constant>E_FATAL_ERROR</constant>.
   </simpara>
  </note>
 </para>

 <para>
  Une structure <literal>match</literal> doit être exhaustive.
  Si l'expression soumis ne correspond à aucun embranchement une erreur
  <classname>UnhandledMatchError</classname> est soulèvé.
 </para>

 <example>
  <title>Exemple d'embranchement manquant.</title>
  <programlisting role="php">
<![CDATA[
<?php
$condition = 5;

try {
    match ($condition) {
        1, 2 => foo(),
        3, 4 => bar(),
    };
} catch (\UnhandledMatchError $e) {
    var_dump($e);
}
?>
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
object(UnhandledMatchError)#1 (7) {
  ["message":protected]=>
  string(33) "Unhandled match value of type int"
  ["string":"Error":private]=>
  string(0) ""
  ["code":protected]=>
  int(0)
  ["file":protected]=>
  string(9) "/in/ICgGK"
  ["line":protected]=>
  int(6)
  ["trace":"Error":private]=>
  array(0) {
  }
  ["previous":"Error":private]=>
  NULL
}
]]>
  </screen>
 </example>

 <sect2>
  <title>Utilisation de match pour gérer les expressions conditionnels</title>
  <para>
   Il est possible d'utiliser une structure <literal>match</literal> pour gérer
   les expression conditions en utilisant <code>true</code> comme expression soumis.
  </para>

  <example>
   <title>Embranchement basé sur une plage d'entier</title>
   <programlisting role="php">
<![CDATA[
<?php

$age = 23;

$result = match (true) {
    $age >= 65 => 'senior',
    $age >= 25 => 'adult',
    $age >= 18 => 'young adult',
    default => 'kid',
};

var_dump($result);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(11) "young adult"
]]>
   </screen>
  </example>

  <example>
   <title>Embranchement basé sur du texte</title>
   <programlisting role="php">
<![CDATA[
<?php

$text = 'Bienvenue chez nous';

$result = match (true) {
    str_contains($text, 'Welcome') || str_contains($text, 'Hello') => 'en',
    str_contains($text, 'Bienvenue') || str_contains($text, 'Bonjour') => 'fr',
    // ...
};

var_dump($result);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(2) "fr"
]]>
   </screen>
  </example>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
